                                        线程的同步方法
1.使用同步语句
    Synchronized（expr）
    {
        statements;
    }
    特点：

    synchronized 方法控制对类成员变量的访问：每个类实例对应一把锁，每个 synchronized 方法都必须获得调用该方法的类实例的锁方能

    执行，否则所属线程阻塞，方法一旦执行，就独占该锁，直到从该方法返回时才将锁释放，此后被阻塞的线程方能获得该锁，重新进入可执行

    状态。这种机制确保了同一时刻对于每一个类实例，其所有声明为 synchronized 的成员函数中至多只有一个处于可执行状态（因为至多只有

    一个能够获得该类实例对应的锁），从而有效避免了类成员变量的访问冲突（只要所有可能访问类成员变量的方法均被声明为 synchronized）


    synchronized 方法的缺陷：
    若将一个大的方法声明为synchronized 将会大大影响效率，典型地，若将线程类的方法 run() 声明为

     synchronized ，由于在线程的整个生命期内它一直在运行，因此将导致它对本类任何 synchronized 方法的调用都永远不会成功。当然我们可

     以通过将访问类成员变量的代码放到专门的方法中，将其声明为 synchronized ，并在主方法中调用来解决这一问题，但是 Java 为我们提供

     了更好的解决办法，那就是 synchronized 块。

     对synchronized(this)的一些理解
     一、当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线

     程必须等待当前线程执行完这个代码块以后才能执行该代码块。
     二、然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized

     (this)同步代码块。
     三、尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)

     同步代码块的访问将被阻塞。
     四、当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个

     object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。
     五、以上规则对其它对象锁同样适用

2.利用加锁同步     代码见    AccountWithSyncUsingLock
     2.1使用Lock方法：

     Lock的创建： Lock lock = new ReentrantLock();
                 lock.lock();
                 try{
                      //可能会出现线程安全的操作
                     }
                 finally{
                    //一定在finally中释放锁
                   //也不能把获取锁在try中进行，因为有可能在获取锁的时候抛出异常
                  lock.ublock();
    说明：被保护的共享变量使用lock()方法加锁，之后紧随一个 try - catch语句块，并且在finally子句中使用lock.unlock()方法释放这个锁

    2.2Lock接口与synchronized关键字的区别

    Lock接口可以尝试非阻塞地获取锁 当前线程尝试获取锁。如果这一时刻锁没有被其他线程获取到，则成功获取并持有锁。
    *Lock接口能被中断地获取锁 与synchronized不同，获取到锁的线程能够响应中断，当获取到的锁的线程被中断时，中断异常将会被抛出，同时锁会被释放。
    Lock接口在指定的截止时间之前获取锁，如果截止时间到了依旧无法获取锁，则返回。

    2.3Lock接口的API

    void lock() 获取锁,调用该方法当前线程将会获取锁，当锁获取后，该方法将返回。
    void lockInterruptibly() throws InterruptedException 可中断获取锁，与lock()方法不同之处在于该方法会响应中断，即在锁的获取过程中可以中断当前线程
    boolean tryLock() 尝试非阻塞的获取锁，调用该方法立即返回，true表示获取到锁
    boolean tryLock(long time,TimeUnit unit) throws InterruptedException 超时获取锁，以下情况会返回：时间内获取到了锁，时间内被中断，时间到了没有获取到锁。
    void unlock() 释放锁

    2.5了解Lock接口最常用的实现ReentrantLock重入锁

    ReentrantLock是Lock接口一种常见的实现，它是支持重进入的锁即表示该锁能够支持一个线程对资源的重复加锁。该锁还支持获取锁时的公平与非公平的选择。
    关于锁的重进入，其实synchronized关键字也支持。如前所述，synchronized关键字也是隐式的支持重进入而对于ReentrantLock而言，对于已经获取到锁的线程
    ，再次调用lock()方法时依然可以获取锁而不被阻塞。

    理解了锁的重进入，现在解释刚刚提到的公平获取锁与非公平获取锁。如果在绝对时间上，先对于锁进行获取的请求一定先被满足，那么这个锁就是公平的，反之就是非公平的。
    公平的获取锁也就是等待时间最久的线程优先获取到锁。ReentrantLock的构造函数来控制是否为公平锁。

    我在第一次了解到公平锁于非公平锁的时候，第一反应是公平锁的效率高，应该使用公平锁。但实际的情况是，非公平的锁的效率远远大于公平锁。

    2.6了解Lock接口的实现类ReentrantReadWriteLock读写锁

    前面提到的ReentrantLock是排他锁，该锁在同一时刻只允许一个线程来访问，而读写锁在同一时刻允许可以有多个线程来访问，但在写线程访问时，所有的读线程和其他写线程被阻塞。
    读写锁维护了一对锁，一个读锁和一个写锁，通过读写锁分离，使得并发性相比一般的排他锁有了很大的提升。

    读写锁除了使用在写操作happends-before与读操作以及并发性的提升之外，读写锁也能够简化读写交互场景的编程方式。假设在程序中定义一个共享的用作缓存数据结构，
    它的大部分时间提供读服务(查询，搜索等)而写操作较少，但写操作之后需要立即对后续的读操作可见。在没有读写锁之前，实现这个功能需要使用等待通知机制。
    无论使用那种方式，目的都是为了写操作立即可见于读操作而避免脏读。但使用读写锁却比等待通知简单明了多了。
    一般情况下，读写锁性能优于排他锁。它能提供更好的并发性和吞吐量。

    2.7ReentrantReadWriteLock读写锁的几个特性:

    公平选择性
    重进入
    锁降级

3.线程间的协作
    线程间的通信条件：Lock对象的newCondition()方法创建对象，await（）方法使当前线程处于等待状态，知道condition条件发生，sigal()
    用于唤醒一个处于等待中的线程，相应的，singalAll（）唤醒所有等待中的线程
